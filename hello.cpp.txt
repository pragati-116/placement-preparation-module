class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n =matrix.size();
        for(int i =0;i<n;i++){
            for(int j =0;j<i;j++){
                swap(matrix[i][j],matrix[j][i]);
            }
        }
        for(int i =0;i<n;i++){
     reverse (matrix[i].begin(),matrix[i].end());
        }
        
    }
};



class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        for(int j=0,i=m;j<n;j++ ){
            nums1[i]=nums2[j];
            i++;
            
        }
        sort(nums1.begin(),nums1.end());
        
    }
};



class Solution {
public:

    int findDuplicate(vector<int>& nums) {
        int slow = nums[0], fast = nums[0];
        do {
            slow = nums[slow];
            fast = nums[nums[fast]];
        } while (slow != fast);
        fast = nums[0];
        while (slow != fast) {
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
};
   