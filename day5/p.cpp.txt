 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode*prev=NULL;
        ListNode*curr=head;
        while(curr!=NULL){
ListNode*forward=curr->next;
        curr->next=prev;
        prev=curr;
        curr=forward;
        }
        
        return prev ;
    }
};







class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode*slow=head ;
        ListNode*fast=head;
        while(fast&&fast->next){
          slow=slow->next;
        fast=fast->next->next;
        }
      return slow;  
    }
};



 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode*dummy,*temp;
        dummy=new ListNode();
        temp=dummy;
        while(list1&&list2){

        if(list1->val<list2->val)
        {
            temp->next=list1;
            list1=list1->next;
        }
            else{
                temp->next=list2;
                list2=list2->next;
            }
            temp=temp->next;
        }
        if(list1)temp->next=list1;
             if(list2)temp->next=list2;
            return dummy->next;
            
        
        
    }
};



class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode*fast=head, *slow=head;
     
        for(int i =0;i<n;i++)
            if(!fast) return head->next;
        while(fast->next)fast=fast->next;
        slow=slow->next;
        slow->next = slow->next->next;
        return head;
        
        
    }
};




 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
                ListNode *dummy = new ListNode(); 
        ListNode *temp = dummy; 
        int carry = 0;
        while( (l1 != NULL || l2 != NULL) || carry) {
            int sum = 0; 
            if(l1 != NULL) {
                sum += l1->val; 
                l1 = l1 -> next; 
            }
            
            if(l2 != NULL) {
                sum += l2 -> val; 
                l2 = l2 -> next; 
            }
            
            sum += carry; 
            carry = sum / 10; 
            ListNode *node = new ListNode(sum % 10); 
            temp -> next = node; 
            temp = temp -> next; 
        }
        return dummy -> next; 
    }
};




 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void deleteNode(ListNode* node) {
        node->val=node->next->val;
        node->next=node->next->next;
        
    }
};